// Generated by @wagmi/cli@1.3.0 on 7/31/2023 at 10:02:48 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OptimismPortal
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const optimismPortalABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_l2Oracle',
        internalType: 'contract L2OutputOracle',
        type: 'address',
      },
      { name: '_guardian', internalType: 'address', type: 'address' },
      { name: '_paused', internalType: 'bool', type: 'bool' },
      {
        name: '_config',
        internalType: 'contract SystemConfig',
        type: 'address',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'version',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'opaqueData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'TransactionDeposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'withdrawalHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'success', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'WithdrawalFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'withdrawalHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'WithdrawalProven',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'GUARDIAN',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'L2_ORACLE',
    outputs: [
      { name: '', internalType: 'contract L2OutputOracle', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SYSTEM_CONFIG',
    outputs: [
      { name: '', internalType: 'contract SystemConfig', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_gasLimit', internalType: 'uint64', type: 'uint64' },
      { name: '_isCreation', internalType: 'bool', type: 'bool' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'depositTransaction',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'donateETH',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_tx',
        internalType: 'struct Types.WithdrawalTransaction',
        type: 'tuple',
        components: [
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'gasLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'finalizeWithdrawalTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'finalizedWithdrawals',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_paused', internalType: 'bool', type: 'bool' }],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_l2OutputIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isOutputFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'l2Sender',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '_byteCount', internalType: 'uint64', type: 'uint64' }],
    name: 'minimumGasLimit',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'params',
    outputs: [
      { name: 'prevBaseFee', internalType: 'uint128', type: 'uint128' },
      { name: 'prevBoughtGas', internalType: 'uint64', type: 'uint64' },
      { name: 'prevBlockNum', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_tx',
        internalType: 'struct Types.WithdrawalTransaction',
        type: 'tuple',
        components: [
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'gasLimit', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: '_l2OutputIndex', internalType: 'uint256', type: 'uint256' },
      {
        name: '_outputRootProof',
        internalType: 'struct Types.OutputRootProof',
        type: 'tuple',
        components: [
          { name: 'version', internalType: 'bytes32', type: 'bytes32' },
          { name: 'stateRoot', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'messagePasserStorageRoot',
            internalType: 'bytes32',
            type: 'bytes32',
          },
          { name: 'latestBlockhash', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
      { name: '_withdrawalProof', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'proveWithdrawalTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'provenWithdrawals',
    outputs: [
      { name: 'outputRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'timestamp', internalType: 'uint128', type: 'uint128' },
      { name: 'l2OutputIndex', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__.
 */
export function useOptimismPortalRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"GUARDIAN"`.
 */
export function useOptimismPortalGuardian<
  TFunctionName extends 'GUARDIAN',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'GUARDIAN',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"L2_ORACLE"`.
 */
export function useOptimismPortalL2Oracle<
  TFunctionName extends 'L2_ORACLE',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'L2_ORACLE',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"SYSTEM_CONFIG"`.
 */
export function useOptimismPortalSystemConfig<
  TFunctionName extends 'SYSTEM_CONFIG',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'SYSTEM_CONFIG',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"finalizedWithdrawals"`.
 */
export function useOptimismPortalFinalizedWithdrawals<
  TFunctionName extends 'finalizedWithdrawals',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'finalizedWithdrawals',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"isOutputFinalized"`.
 */
export function useOptimismPortalIsOutputFinalized<
  TFunctionName extends 'isOutputFinalized',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'isOutputFinalized',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"l2Sender"`.
 */
export function useOptimismPortalL2Sender<
  TFunctionName extends 'l2Sender',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'l2Sender',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"minimumGasLimit"`.
 */
export function useOptimismPortalMinimumGasLimit<
  TFunctionName extends 'minimumGasLimit',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'minimumGasLimit',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"params"`.
 */
export function useOptimismPortalParams<
  TFunctionName extends 'params',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'params',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"paused"`.
 */
export function useOptimismPortalPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"provenWithdrawals"`.
 */
export function useOptimismPortalProvenWithdrawals<
  TFunctionName extends 'provenWithdrawals',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'provenWithdrawals',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"version"`.
 */
export function useOptimismPortalVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof optimismPortalABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof optimismPortalABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: optimismPortalABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof optimismPortalABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optimismPortalABI}__.
 */
export function useOptimismPortalWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof optimismPortalABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof optimismPortalABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof optimismPortalABI, TFunctionName, TMode>({
    abi: optimismPortalABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"depositTransaction"`.
 */
export function useOptimismPortalDepositTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof optimismPortalABI,
          'depositTransaction'
        >['request']['abi'],
        'depositTransaction',
        TMode
      > & { functionName?: 'depositTransaction' }
    : UseContractWriteConfig<
        typeof optimismPortalABI,
        'depositTransaction',
        TMode
      > & {
        abi?: never
        functionName?: 'depositTransaction'
      } = {} as any,
) {
  return useContractWrite<
    typeof optimismPortalABI,
    'depositTransaction',
    TMode
  >({
    abi: optimismPortalABI,
    functionName: 'depositTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"donateETH"`.
 */
export function useOptimismPortalDonateEth<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof optimismPortalABI,
          'donateETH'
        >['request']['abi'],
        'donateETH',
        TMode
      > & { functionName?: 'donateETH' }
    : UseContractWriteConfig<typeof optimismPortalABI, 'donateETH', TMode> & {
        abi?: never
        functionName?: 'donateETH'
      } = {} as any,
) {
  return useContractWrite<typeof optimismPortalABI, 'donateETH', TMode>({
    abi: optimismPortalABI,
    functionName: 'donateETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"finalizeWithdrawalTransaction"`.
 */
export function useOptimismPortalFinalizeWithdrawalTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof optimismPortalABI,
          'finalizeWithdrawalTransaction'
        >['request']['abi'],
        'finalizeWithdrawalTransaction',
        TMode
      > & { functionName?: 'finalizeWithdrawalTransaction' }
    : UseContractWriteConfig<
        typeof optimismPortalABI,
        'finalizeWithdrawalTransaction',
        TMode
      > & {
        abi?: never
        functionName?: 'finalizeWithdrawalTransaction'
      } = {} as any,
) {
  return useContractWrite<
    typeof optimismPortalABI,
    'finalizeWithdrawalTransaction',
    TMode
  >({
    abi: optimismPortalABI,
    functionName: 'finalizeWithdrawalTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"initialize"`.
 */
export function useOptimismPortalInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof optimismPortalABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof optimismPortalABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof optimismPortalABI, 'initialize', TMode>({
    abi: optimismPortalABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"pause"`.
 */
export function useOptimismPortalPause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof optimismPortalABI,
          'pause'
        >['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof optimismPortalABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<typeof optimismPortalABI, 'pause', TMode>({
    abi: optimismPortalABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"proveWithdrawalTransaction"`.
 */
export function useOptimismPortalProveWithdrawalTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof optimismPortalABI,
          'proveWithdrawalTransaction'
        >['request']['abi'],
        'proveWithdrawalTransaction',
        TMode
      > & { functionName?: 'proveWithdrawalTransaction' }
    : UseContractWriteConfig<
        typeof optimismPortalABI,
        'proveWithdrawalTransaction',
        TMode
      > & {
        abi?: never
        functionName?: 'proveWithdrawalTransaction'
      } = {} as any,
) {
  return useContractWrite<
    typeof optimismPortalABI,
    'proveWithdrawalTransaction',
    TMode
  >({
    abi: optimismPortalABI,
    functionName: 'proveWithdrawalTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"unpause"`.
 */
export function useOptimismPortalUnpause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof optimismPortalABI,
          'unpause'
        >['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof optimismPortalABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<typeof optimismPortalABI, 'unpause', TMode>({
    abi: optimismPortalABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optimismPortalABI}__.
 */
export function usePrepareOptimismPortalWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optimismPortalABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optimismPortalABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof optimismPortalABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"depositTransaction"`.
 */
export function usePrepareOptimismPortalDepositTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof optimismPortalABI,
      'depositTransaction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optimismPortalABI,
    functionName: 'depositTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof optimismPortalABI,
    'depositTransaction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"donateETH"`.
 */
export function usePrepareOptimismPortalDonateEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optimismPortalABI, 'donateETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optimismPortalABI,
    functionName: 'donateETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optimismPortalABI, 'donateETH'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"finalizeWithdrawalTransaction"`.
 */
export function usePrepareOptimismPortalFinalizeWithdrawalTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof optimismPortalABI,
      'finalizeWithdrawalTransaction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optimismPortalABI,
    functionName: 'finalizeWithdrawalTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof optimismPortalABI,
    'finalizeWithdrawalTransaction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareOptimismPortalInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optimismPortalABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optimismPortalABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optimismPortalABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareOptimismPortalPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optimismPortalABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optimismPortalABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optimismPortalABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"proveWithdrawalTransaction"`.
 */
export function usePrepareOptimismPortalProveWithdrawalTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof optimismPortalABI,
      'proveWithdrawalTransaction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optimismPortalABI,
    functionName: 'proveWithdrawalTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof optimismPortalABI,
    'proveWithdrawalTransaction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link optimismPortalABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareOptimismPortalUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof optimismPortalABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: optimismPortalABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof optimismPortalABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optimismPortalABI}__.
 */
export function useOptimismPortalEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof optimismPortalABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: optimismPortalABI,
    ...config,
  } as UseContractEventConfig<typeof optimismPortalABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optimismPortalABI}__ and `eventName` set to `"Initialized"`.
 */
export function useOptimismPortalInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof optimismPortalABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optimismPortalABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof optimismPortalABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optimismPortalABI}__ and `eventName` set to `"Paused"`.
 */
export function useOptimismPortalPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof optimismPortalABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optimismPortalABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof optimismPortalABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optimismPortalABI}__ and `eventName` set to `"TransactionDeposited"`.
 */
export function useOptimismPortalTransactionDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof optimismPortalABI, 'TransactionDeposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optimismPortalABI,
    eventName: 'TransactionDeposited',
    ...config,
  } as UseContractEventConfig<typeof optimismPortalABI, 'TransactionDeposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optimismPortalABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useOptimismPortalUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof optimismPortalABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optimismPortalABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof optimismPortalABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optimismPortalABI}__ and `eventName` set to `"WithdrawalFinalized"`.
 */
export function useOptimismPortalWithdrawalFinalizedEvent(
  config: Omit<
    UseContractEventConfig<typeof optimismPortalABI, 'WithdrawalFinalized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optimismPortalABI,
    eventName: 'WithdrawalFinalized',
    ...config,
  } as UseContractEventConfig<typeof optimismPortalABI, 'WithdrawalFinalized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link optimismPortalABI}__ and `eventName` set to `"WithdrawalProven"`.
 */
export function useOptimismPortalWithdrawalProvenEvent(
  config: Omit<
    UseContractEventConfig<typeof optimismPortalABI, 'WithdrawalProven'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: optimismPortalABI,
    eventName: 'WithdrawalProven',
    ...config,
  } as UseContractEventConfig<typeof optimismPortalABI, 'WithdrawalProven'>)
}
